#!/usr/bin/perl
#
# Edit the tags of MP3 files by applying arbitrary Perl expressions.
#
# In the Perl expression:
#  - $_ is the title, artist, album or genre to modify.
#  - $FILE is the name of the MP3 file.
#  - $MMSS is the duration in minutes and seconds.
#  - $SECONDS is the duration in seconds.
#
# Example:
#  tag3 --title='s/^/Podcast: /' podcast*.mp3
#
# --title -t
# --artist -a
# --album -l
# --genre -g
# --track -k
# --comment -c
# --year -y
#
# -tfoo is shorthand for --title='$_="foo"'
#
# Example: Insert at the beginning of the title the string "MMDD", the month &
# day of the last-modification time of each mp3 file.
#
#  tag3 --title='($m,$d)=(localtime((stat$FILE)[9]))[4,3];s/^/sprintf"%02d%02d ",$m+1,$d/e' *.mp3
#

# This software is distributed under the "Simplified BSD license":
#
# Copyright Michael Cook <michael@waxrat.com>. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

use strict;
use warnings;
use Getopt::Long;
use MP3::Tag;                   # apt: libmp3-tag-perl

my ($THIS) = $0 =~ m%([^/]+)$%;
my $USAGE = "usage: $THIS [options] files.mp3\n";

my @TITLE;
my @ARTIST;
my @ALBUM;
my @GENRE;
my @TRACK;
my @COMMENT;
my @YEAR;
my $UPDATE_LENGTH;
my $DRYRUN;
my $CHECK;
my $VERBOSE;
my $DEBUG;

my @saved_field_values;
sub make_setter
{
    my ($aref, $value) = @_;

    my $i = @saved_field_values;
    push @saved_field_values, $value;
    push @$aref, "\$_ = \$saved_field_values[$i]";
}

Getopt::Long::config("bundling");
GetOptions
(
 # Argument is perl code to eval to modify $_ which contains the field value.
 "title=s" => \@TITLE,
 "artist=s" => \@ARTIST,
 "album=s" => \@ALBUM,
 "genre=s" => \@GENRE,
 "track=s" => \@TRACK,
 "comment=s" => \@COMMENT,
 "year=s" => \@YEAR,

 # Argument is a string to use for the new value of the field.
 # For example, -tfoo is shorthand for --title='$_="foo"'
 "t=s" => sub { make_setter(\@TITLE, $_[1]) },
 "a=s" => sub { make_setter(\@ARTIST, $_[1]) },
 "l=s" => sub { make_setter(\@ALBUM, $_[1]) },
 "g=s" => sub { make_setter(\@GENRE, $_[1]) },
 "k=s" => sub { make_setter(\@TRACK, $_[1]) },
 "c=s" => sub { make_setter(\@COMMENT, $_[1]) },
 "y=s" => sub { make_setter(\@YEAR, $_[1]) },

 "update-length|u" => \$UPDATE_LENGTH,

 "dry-run|n" => \$DRYRUN,

 "check!" => \$CHECK,
 #
 # Verify this script has what it needs to run.
 # Validates any "use" directives and any dependencies on external programs.
 #

 "verbose|v" => \$VERBOSE,
 "debug!" => \$DEBUG,
)
or die $USAGE;

exit 0 if $CHECK;

@ARGV == 0 and die $USAGE;

our $FILE;
our $MMSS;
our $SECONDS;

sub make_editor
{
    my ($name, $expr) = @_;

    $expr = join ";\n\t", @$expr;

    # This odd looking "LOOP:" construct is used so "last" will work the way
    # you'd expect.  See perlsyn(1), search for "LOOP:".
    $expr = <<EOF;
        sub edit_$name {
            LOOP: {
                do {
                    $expr
                } while 0;
            }
        }
EOF
    warn "> expr ==>$expr<==" if $DEBUG;
    local $^W;
    no strict;
    eval $expr;
    $@ && die "($name) $@";
}

make_editor "title", \@TITLE;
make_editor "artist", \@ARTIST;
make_editor "album", \@ALBUM;
make_editor "genre", \@GENRE;
make_editor "track", \@TRACK;
make_editor "comment", \@COMMENT;
make_editor "year", \@YEAR;

my $exit = 0;
for my $file (@ARGV)
{
    my $mp3 = MP3::Tag->new($file);
    unless ($mp3)
    {
        warn "$file: $!";
        $exit = 1;
        next;
    }
    my $changed;

    if ($UPDATE_LENGTH)
    {
        warn "> $file: update length\n" if $DEBUG;
        unless ($DRYRUN)
        {
            $mp3->config("update_length");
            #$mp3->config(write_v24 => 1);
        }
        ++$changed;
    }

    $FILE = $file;
    $MMSS = $mp3->time_mm_ss();
    $SECONDS = $mp3->total_secs_int();

    my $title = $mp3->title();
    warn "> $file: title {$title}\n" if $DEBUG;
    {
        local $_ = $title;
        edit_title();
        if ($_ eq $title)
        {
            warn "> unchanged title '$title'\n" if $DEBUG;
        }
        else
        {
            warn "> $file: title {$_}\n" if $DEBUG;
            $mp3->title_set($_)
                unless $DRYRUN;
            ++$changed;
            print "Title : \"$title\"\n",
                  "      : \"$_\"\n"
                      if $VERBOSE;
        }
    }

    my $artist = $mp3->artist();
    warn "> $file: artist {$artist}\n" if $DEBUG;
    {
        local $_ = $artist;
        edit_artist();
        if ($_ eq $artist)
        {
            warn "> unchanged artist '$artist'\n" if $DEBUG;
        }
        else
        {
            warn "> $file: artist {$_}\n" if $DEBUG;
            $mp3->artist_set($_)
                unless $DRYRUN;
            ++$changed;
            print "Artist: \"$artist\"\n",
                  "      : \"$_\"\n"
                      if $VERBOSE;
        }
    }

    my $album = $mp3->album();
    warn "> $file: album {$album}\n" if $DEBUG;
    {
        local $_ = $album;
        edit_album();
        if ($_ eq $album)
        {
            warn "> unchanged album '$album'\n" if $DEBUG;
        }
        else
        {
            warn "> $file: album {$_}\n" if $DEBUG;
            $mp3->album_set($_)
                unless $DRYRUN;
            ++$changed;
            print "Album : \"$album\"\n",
                  "      : \"$_\"\n"
                      if $VERBOSE;
        }
    }

    my $genre = $mp3->genre();
    warn "> $file: genre {$genre}\n" if $DEBUG;
    {
        local $_ = $genre;
        edit_genre();
        if ($_ eq $genre)
        {
            warn "> unchanged genre '$genre'\n" if $DEBUG;
        }
        else
        {
            warn "> $file: genre {$_}\n" if $DEBUG;
            $mp3->genre_set($_)
                unless $DRYRUN;
            ++$changed;
            print "Genre : \"$genre\"\n",
                  "      : \"$_\"\n"
                      if $VERBOSE;
        }
    }

    my $track = $mp3->track();
    warn "> $file: track {$track}\n" if $DEBUG;
    {
        local $_ = $track;
        edit_track();
        if ($_ eq $track)
        {
            warn "> unchanged track '$track'\n" if $DEBUG;
        }
        else
        {
            warn "> $file: track {$_}\n" if $DEBUG;
            $mp3->track_set($_)
                unless $DRYRUN;
            ++$changed;
            print "Track : \"$track\"\n",
                  "      : \"$_\"\n"
                      if $VERBOSE;
        }
    }

    my $comment = $mp3->comment();
    warn "> $file: comment {$comment}\n" if $DEBUG;
    {
        local $_ = $comment;
        edit_comment();
        if ($_ eq $comment)
        {
            warn "> unchanged comment '$comment'\n" if $DEBUG;
        }
        else
        {
            warn "> $file: comment {$_}\n" if $DEBUG;
            $mp3->comment_set($_)
                unless $DRYRUN;
            ++$changed;
            print "Comment : \"$comment\"\n",
                  "        : \"$_\"\n"
                      if $VERBOSE;
        }
    }

    my $year = $mp3->year();
    warn "> $file: year {$year}\n" if $DEBUG;
    {
        local $_ = $year;
        edit_year();
        if ($_ eq $year)
        {
            warn "> unchanged year '$year'\n" if $DEBUG;
        }
        else
        {
            warn "> $file: year {$_}\n" if $DEBUG;
            $mp3->year_set($_)
                unless $DRYRUN;
            ++$changed;
            print "Year : \"$year\"\n",
                  "     : \"$_\"\n"
                      if $VERBOSE;
        }
    }

    if ($changed && ! $DRYRUN)
    {
        print "Updating tags in $file\n"
            if $VERBOSE;
        local $SIG{__WARN__} = sub {
            print STDERR @_;
            $exit = 1;
        };
        $mp3->update_tags;
    }
    warn "> close $file\n" if $DEBUG;
    $mp3->close;
}
exit $exit;
